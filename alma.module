<?php

/**
 * @file
 *
 */

define('ALMA_AUTH_BLOCKED', '4e5531951f55ab8f6895684999c69c2');

/**
 * Get list of pickup branches.
 */
function alma_reservation_pickup_branches($account=null) {
  // Throw exception if we're not logged in. ?? WHY this method needs no credentials
  // ding_user_get_creds($account);
  // return  alma_client_invoke('get_reservation_branches');

  // cache alma pickup branches - they are not likely to change
  static $alma_pickup_branches;
  if (!isset($alma_pickup_branches) ) {
    if ( $cache = cache_get('alma_pickup_branches') ) {
      $alma_pickup_branches = unserialize($cache->data);
    }
    else {
      $alma_pickup_branches = alma_client_invoke('get_reservation_branches');
      cache_set( 'alma_pickup_branches',  serialize($alma_pickup_branches),'cache');
    }
  }
  return $alma_pickup_branches;
}

/**
 * Implements hook_requirements().
 */
function alma_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time.
  $t = get_t();

  if (!function_exists('simplexml_load_string')) {
    $requirements['simplexml'] = array(
      'title' => 'SimpleXML',
      'description' => $t('The Alma module requires SimpleXML to function. Please install and/or enable SimpleXML in your PHP configuration.'),
      'severity' => REQUIREMENT_ERROR,
    );
  }

  return $requirements;
}

/**
 * Implements hook_ding_provider().
 */
function alma_ding_provider() {
  $path = drupal_get_path('module', 'alma');

  return array(
    'title' => 'Alma provider',
    'settings' => 'alma_settings_form',
    'provides' => array(
      'availability' => array(
        'prefix' => 'availability',
        'file' => $path . '/includes/alma.availability.inc',
      ),
      'debt' => array(
        'prefix' => 'debt',
        'file' => $path . '/includes/alma.debt.inc',
      ),
      'loan' => array(
        'prefix' => 'loan',
        'file' => $path . '/includes/alma.loan.inc',
      ),
      'reservation' => array(
        'prefix' => 'reservation',
        'file' => $path . '/includes/alma.reservation.inc',
      ),
      'user' => array(
        'prefix' => 'user',
        'file' => $path . '/includes/alma.user.inc',
      ),
      'user_consent' => array(
        'prefix' => 'user_consent',
        'file' => $path . '/includes/alma.user_consent.inc',
      ),
    ),
  );
}

/**
 * Form callback for provider module settings.
 *
 * This is a regular form callback.
 */
function alma_settings_form() {
  $form['alma'] = array(
    '#type' => 'fieldset',
    '#title' => t('Alma service settings'),
    '#tree' => FALSE,
  );

  $form['alma']['alma_base_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Alma base URL'),
    '#description' => t('Base URL for Alma service.'),
    '#required' => TRUE,
    '#default_value' => variable_get('alma_base_url', ''),
  );

  $form['alma']['alma_enable_logging'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable logging'),
    '#default_value' => variable_get('alma_enable_logging', FALSE),
    '#description' => t('Logs requests to the Alma webservice. Sensitive information such as CPR number and PIN code is stripped from the requests.'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 * pjo notes: user_profile_form
 * Add in pincode validation.
 */
function alma_form_user_profile_form_alter(&$form, &$form_state) {
  // Ensure that we're dealing with a provider user.
  if (!ding_user_is_provider_user($form_state['user'])) {
    return;
  }  
  
  // change size and length of pincode
  $form['account']['pincode']['#size'] = 32;    
  $form['account']['pincode']['#maxlength'] = 32;
 
  // @todo; WHAT are the rules for alma pincode
  // HOW do we validate

  // custom validator ?? maybe pincode validator ??
  // $form['#validate'][] = 'alma_profile_form_validate';
}



/**
 * Return a fully instantiated AlmaClient instance.
 */
function alma_client() {
  // This is basically a singleton. We also wait until right before
  // instantiating to include our required classes. That seems like a
  // decent performance tradeoff instead of loading everything on every
  // page load.
  static $client;
  if (!isset($client)) {
    $path = drupal_get_path('module', 'alma');
    try {
      $client = new AlmaClient(variable_get('alma_base_url', ''));
    }
    catch (Exception $e) {
      watchdog('alma', 'Constructor error: “@message”', array('@message' => $e->getMessage(), WATCHDOG_ERROR));
      return NULL;
    }

  }
  return $client;
}

/**
 * Calls the Alma backend, possibly caching the result.
 *
 * @param $method
 *   The desired method.
 * @param ...
 *   Arguments to the method.
 *
 * @return mixed
 *   NULL on error, or the result of the method call.
 */
function alma_client_invoke($method) {
  $args = func_get_args();
  array_shift($args); // Lose the method.
  $client = alma_client();

  try {
    $result = call_user_func_array(array($client, $method), $args);
  }
  catch (Exception $e) {
    watchdog('alma', '@method error: “@message”', array('@method' => $method, '@message' => $e->getMessage()), WATCHDOG_ERROR);
    throw $e;
  }

  return $result;
}

/**
 * Get the complete organisation info from Alma.
 *
 * Includes branches, departments, locations, sublocations and collections. The
 * information is cache until the cache is cleared or the reset parameter is
 * TRUE.
 *
 * @param boolean $reset
 * Optional. If TRUE reset the cached data and reload.
 * @return array
 * Array of the different organisational unit, each an array of their
 * member units.
 */
function alma_get_organisation($reset = FALSE) {
  // Return data from cache if available.
  static $organisation;
  if (!$organisation || $reset) {
    if (($cache = cache_get('alma_organisation')) && !empty($cache->data) && !$reset) {
      $organisation = $cache->data;
    }
    else {
      $organisation = array(
        'branch' => alma_client_invoke('get_branches'),
        'department' => alma_client_invoke('get_departments'),
        'location' => alma_client_invoke('get_locations'),
        'sublocation' => alma_client_invoke('get_sublocations'),
        'collection' => alma_client_invoke('get_collections'),
        'reservation' =>  alma_reservation_pickup_branches(),//alma_client_invoke('get_reservation_branches'),
      );

      // Cache output for 24 hours if we got all the data correctly.
      if ($organisation['branch'] && $organisation['department'] &&
          $organisation['location'] && $organisation['sublocation'] &&
          $organisation['collection'] && $organisation['reservation']) {
        cache_set('alma_organisation', $organisation, 'cache');
      }
    }
  }

  return $organisation;
}

/**
 * Implements hook_user_view
 */
function alma_user_view( $account, $view_mode, $langcode ) {
  if (ding_user_is_provider_user($account)) {
    $creds = ding_user_get_creds($account);
    
    if ($creds && ($userInfo =  ding_provider_invoke('user', 'info', $creds)) && isset($userInfo)) {
      foreach ($userInfo as $key => $prop) {
        $data[$key] = isset($prop) ? $prop : '';
      }
  
      $account->content['name'] = array(
        '#type' => 'item',
        '#title' => t('Name'),
        '#markup' => $data['firstname'],
      );
  
      $address_parts = array($data['address']);
      if (!empty($data['postal']) || !empty($data['city'])) {
        $address_parts[] = join('<br /> ', array_filter(array($data['postal'], $data['city'])));
      }
  
      // @todo: really, there should be a template for this.
      $account->content['address'] = array(
        '#type' => 'item',
        '#title' => t('Address'),
        '#markup' => '<p>' . join('<br />', $address_parts) . '</p>',
      );
      
      // @todo: add provider specific fields
      alma_set_profile2_fields($account);
    };
  }
}

function alma_set_profile2_fields($account) {
  if( !module_exists('profile2') ) {
    return;
  } 

  $profile2 = profile2_load_by_user($account, 'provider_alma');
  if( empty($profile2) ) {
    return;
  }  

  // wrapper for profile2-fields
  $account->content['profile2'] = array(
      '#type' => 'item',
      '#title' => t('My library'),    
      '#prefix' => '<div class="profile2_provider_fields">',
      '#suffix' => '</div>',
    ); 

  // set preferred branch
  if( $pref_branch = alma_get_preferred_branch( $profile2 ) ) {
    $account->content['profile2']['preferred_branch'] = array(
      '#type' => 'item',
      '#title' => t('Pickup branch'),
      '#markup' => '<span>'.$pref_branch.'</span>',      
    );
  }   

  // set interest period
  if( $interest_period = alma_get_interest_period($profile2) ) {
    $account->content['profile2']['interest_period'] = array(
      '#type' => 'item',
      '#title' => t('Interest period'),
      '#markup' => '<span>'.$interest_period['value'].'</span>',
    );
  }  

  // set mobile phone
  if( $mob = alma_get_mobile_phone($profile2) ) {
    $account->content['profile2']['mobile'] = array(
      '#type' => 'item',
      '#title' => t('Mobile phone'),
      '#markup' => '<span>'.$mob.'</span>',
    );
  } 
  
  // set reservation pause
  if( $reservation_pause = alma_get_reservation_pause( $profile2 ) ) {
        //wrapper for reservation pause
       $account->content['profile2']['reservation_pause'] = array(
         '#type' => 'item',
         '#title' => t('Reservation pause'),
         '#prefix' => '<div class="profile2_provider_reservation_pause">',
         '#suffix' => '</div>',
       );

       $account->content['profile2']['reservation_pause']['start'] = array(
         '#type' => 'item',
         '#title' => t('Start'),
         '#markup' => '<span>'.str_replace('T00:00:00','',$reservation_pause['start']).'</span>',
       );

        $account->content['profile2']['reservation_pause']['stop'] = array(
         '#type' => 'item',
         '#title' => t('Stop'),
         '#markup' => '<span>'.str_replace('T00:00:00','',$reservation_pause['stop']).'</span>',
       );       
  }
}

function alma_get_mobile_phone( $profile2 ) {
  $langs = field_language('profile2', $profile2);
  
  if(  empty($profile2->field_alma_mobile_phone[$langs['field_alma_mobile_phone']] ) ) {
    return false;
  }

  $mob = 
    isset($profile2->field_alma_mobile_phone[$langs['field_alma_mobile_phone']][0]['value']) ?
    $profile2->field_alma_mobile_phone[$langs['field_alma_mobile_phone']][0]['value'] : FALSE;
  
  return $mob;
}

function alma_get_reservation_pause($profile2){
  // get field languages
  $langs = field_language('profile2', $profile2);
  
  if(  empty($profile2->field_alma_reservation_pause[$langs['field_alma_reservation_pause']] ) ) {
    return false;
  }
  
  $res_pause['start'] = $profile2->field_alma_reservation_pause[$langs['field_alma_reservation_pause']][0]['value'];
  $res_pause['stop'] = $profile2->field_alma_reservation_pause[$langs['field_alma_reservation_pause']][0]['value2'];

  if( strlen($res_pause['start']) < 2 || strlen($res_pause['stop']) < 2 ) {
    return false;
  }

  return $res_pause;
}

function alma_get_interest_period( $profile2 ) {
  // get field languages
  $langs = field_language('profile2', $profile2);
  // get field-info to retrieve values for select list
  $field_info = field_info_field('field_alma_interest_period');  

  $interest_period = FALSE;
  $int_values = isset( $field_info['settings']['allowed_values'] ) ?  $field_info['settings']['allowed_values']: FALSE;
  if( $int_values ) {
    $int_period = $profile2->field_alma_interest_period[$langs['field_alma_interest_period']][0]['value'];
    $interest_period = isset($int_values[$int_period]) ? array('key'=>$int_period,'value'=>$int_values[$int_period]) : FALSE;
  }  
  return $interest_period;
}

function alma_get_preferred_branch( $profile2 ) {
  // get field languages
  $langs = field_language('profile2', $profile2);
  
  //get preferred branch
  $pref_branch = 
    isset($profile2->field_alma_preferred_branch[$langs['field_alma_preferred_branch']][0]['value']) ?
    $profile2->field_alma_preferred_branch[$langs['field_alma_preferred_branch']][0]['value']:'';

  $branches = alma_reservation_pickup_branches();
  $pref = isset($branches[$pref_branch]) ? $branches[$pref_branch] : FALSE;

  return $pref;
}

/**
 * Implements hook_profile2_presave().
 *
 * Sends changes to Alma 
 */
function alma_profile2_presave($profile2) {
  if( !$profile2->type == 'provider_alma' ) {
    return;
  }
  // do not presave when initializing
  // @see alma.user/alma_user_profile_init
  if( isset($profile2->alma_init) ) {
    return;
  }  
  // providerfields: field_alma_preferred_branch, field_alma_interest_period, field_alma_reservation_pause; field_alma_mobile_phone
  $langs = field_language('profile2', $profile2);
  
  // reservation pause
  if( !empty( $profile2->original->field_alma_reservation_pause ) ) {
    $start = 
      isset($profile2->field_alma_reservation_pause[$langs['field_alma_reservation_pause']][0]['value']) ?
    $profile2->field_alma_reservation_pause[$langs['field_alma_reservation_pause']][0]['value'] : '';
    $start = str_replace('T00:00:00','',$start);
    
    $stop = 
      isset($profile2->field_alma_reservation_pause[$langs['field_alma_reservation_pause']][0]['value2']) ?
    $profile2->field_alma_reservation_pause[$langs['field_alma_reservation_pause']][0]['value2'] : '';
    $stop = str_replace('T00:00:00','',$stop);    
    
    $org_start = $profile2->original->field_alma_reservation_pause[$langs['field_alma_reservation_pause']][0]['value'];
    $org_start = str_replace('T00:00:00','',$org_start);
    
    $org_stop = $profile2->original->field_alma_reservation_pause[$langs['field_alma_reservation_pause']][0]['value2'];
    $org_stop = str_replace('T00:00:00','',$org_stop);
    
    if( $start != $org_start || $stop != $org_stop ) {
      $changes['reservation_pause_start'] = $start;
      $changes['reservation_pause_stop'] = $stop;
      if(isset($profile2->field_absent_id[$langs['field_absent_id']][0]))
        $changes['absent_id'] = $profile2->field_absent_id[$langs['field_absent_id']][0]['value'];
    }
  }
  
  // alma_preferred_branch (patronBranch)
  if( !empty( $profile2->original->field_alma_preferred_branch ) ) {
    if(isset($profile2->original->field_alma_preferred_branch[$langs['field_alma_preferred_branch']])) {
      $org_branch = $profile2->original->field_alma_preferred_branch[$langs['field_alma_preferred_branch']][0]['value'];
      if(isset($profile2->field_alma_preferred_branch[$langs['field_alma_preferred_branch']]))
        $new_branch = $profile2->field_alma_preferred_branch[$langs['field_alma_preferred_branch']][0]['value'];
    
      if( $org_branch != $new_branch ) {
        $changes['preferred_branch'] = $new_branch;
      }
    }
  } 
  
  //change or remove
  if( !empty($profile2->original->field_alma_mobile_phone ) ) {
    $org_phone = $profile2->original->field_alma_mobile_phone[$langs['field_alma_mobile_phone']][0]['value'];
    $new_phone = 
      !empty( $profile2->field_alma_mobile_phone[$langs['field_alma_mobile_phone']][0]['value']) ? 
      $profile2->field_alma_mobile_phone[$langs['field_alma_mobile_phone']][0]['value'] :
      'DELETE';
    if( $org_phone != $new_phone ) {
      $changes['mobile'] = $new_phone;
      if(isset($profile2->field_alma_phone_id[$langs['field_alma_phone_id']][0]))
        $changes['phone_id'] = $profile2->field_alma_phone_id[$langs['field_alma_phone_id']][0]['value'];
    }
  }
  // add 
  elseif( isset($profile2->field_alma_mobile_phone) && isset( $profile2->field_alma_mobile_phone[$langs['field_alma_mobile_phone']][0] ) &&
    !isset( $profile2->original->field_alma_mobile_phone[$langs['field_alma_mobile_phone']][0] )) {
    $changes['mobile'] = $profile2->field_alma_mobile_phone[$langs['field_alma_mobile_phone']][0]['value'];   
  } 
  
  
  // Interest period ? apparently not an alma parameter.. @todo; check if Interest period should be saved on provider 
  
  // update provider
  if( isset($changes) ) {
    alma_update_provider($changes, $profile2);
  }  

}

function alma_update_provider( $changes, $profile2 ) {
  $error_message = t('Error communicating with library system. ');
  
  try{  $creds = ding_user_get_creds( $profile2 );}
  catch(Exception $e){
    // rethrow ??
    throw $e;
  }

  // mobile phone; add, change, delete
  if( isset($changes['phone_id']) ) {    
    if( $changes['mobile'] == 'DELETE' ) {
      //delete mobile
      try{
	      $res = alma_client_invoke('remove_phone_number', $creds['name'], $creds['pass'], $changes['phone_id']);
      }
      catch(Exception $e){
	      watchdog('Alma provider', $e->getMessage(), array(), WATCHDOG_ERROR);
      }
      if( !$res ) {
	      $error_message .= t('mobile not deleted');
	      drupal_set_message($error_message,'warning');
      }
    }
    else {
      //update mobile
      try{
	      $res = alma_client_invoke('change_phone_number', $creds['name'], $creds['pass'], $changes['phone_id'], $changes['mobile']);
      }
      catch(Exception $e){
	      watchdog('Alma provider', $e->getMessage(), array(), WATCHDOG_ERROR);
      }
      if( !$res ) {
	      $error_message .= t('mobile not updated');
	      drupal_set_message($error_message,'warning');
      }      
    }       
  }
  if( isset($changes['mobile']) ){
    // add mobile
    try{
      $res = alma_client_invoke('add_phone_number', $creds['name'], $creds['pass'], $changes['mobile'] );
    }
    catch(Exception $e){
      watchdog('Alma provider', $e->getMessage(), array(), WATCHDOG_ERROR);
    }
    if( !$res ) {
      $error_message .= t('mobile not added');
      drupal_set_message($error_message,'warning');
    }
  }
  // update reservation pause (absentPeriod)
  if (!empty( $changes['absent_id']) &&
      !empty($changes['reservation_pause_start']) && 
      !empty($changes['reservation_pause_stop'])) {
    
    try{
      // Hack. In order to retrieve current absent id 
      $ext_info = alma_client_invoke('get_patron_info', $creds['name'], $creds['pass'], TRUE);
    }
    catch (Exception $e){
      watchdog('Alma provider', $e->getMessage(), array(), WATCHDOG_ERROR);
    }
    if (!empty($ext_info) && $ext_info['absent_periods'][0]['id'] != $changes['absent_id']) {
      $changes['absent_id'] = $ext_info['absent_periods'][0]['id'];
    }
    $res = FALSE;
    try {
      $res =  alma_client_invoke('change_absent_period',$creds['name'], $creds['pass'], $changes['absent_id'], $changes['reservation_pause_start'],$changes['reservation_pause_stop'] );
    }
    catch (Exception $e){
      watchdog('Alma provider', $e->getMessage(), array(), WATCHDOG_ERROR);
    }
    if (!$res) {
      $error_message .= t('reservation pause not updated');
      drupal_set_message($error_message,'warning');
    }
  }
  // add reservation pause
  elseif (!empty($changes['reservation_pause_start'])  && !empty($changes['reservation_pause_stop'])) {
    try{
      $ext_info = alma_client_invoke('get_patron_info', $creds['name'], $creds['pass'], TRUE);
    }
    catch(Exception $e){
      watchdog('Alma provider', $e->getMessage(), array(), WATCHDOG_ERROR);
    }
    if(!empty($ext_info) && $ext_info['absent_periods'][0]['id'] != $changes['absent_id']) {
      $changes['absent_id'] = $ext_info['absent_periods'][0]['id'];
    }
    try {
      $res = alma_client_invoke('add_absent_period',$creds['name'], $creds['pass'], $changes['reservation_pause_start'],$changes['reservation_pause_stop']);
    }
    catch(Exception $e){
      watchdog('Alma provider', $e->getMessage(), array(), WATCHDOG_ERROR);
    }
    if (!isset($res)) {
      $error_message .= t('reservation pause not added');
      drupal_set_message($error_message,'warning');
    }
  }
  // delete reservation pause
  elseif( !empty( $changes['absent_id'] ) ) {
    try {
      $res = alma_client_invoke('remove_absent_period', $creds['name'], $creds['pass'], $changes['absent_id']);
    }
    catch(Exception $e){
      watchdog('Alma provider', $e->getMessage(), array(), WATCHDOG_ERROR);
    }

    // this one actually deletes the reservation pause, but returns an error ??
    // for now disable messages...@todo; fix it.
    /* if( !$res ) {
      $error_message .= t('reservation pause not deleted');
      drupal_set_message($error_message,'warning');
      }*/
  }

  // update preferred branch (patronBranch)
  if( !empty($changes['preferred_branch'] ) ) {
    try {
      $res = alma_client_invoke( 'change_patron_preferences' , $creds['name'], $creds['pass'], $changes['preferred_branch']);
    }
    catch(Exception $e){
      watchdog('Alma provider', $e->getMessage(), array(), WATCHDOG_ERROR);
    }
    if( !$res ) {
      $error_message .= t('pickup branch not saved');
      drupal_set_message($error_message,'warning');
    }
  }   

   // refresh patron
  alma_get_patron($creds, TRUE); 
}

/**
 * Get patron data from Alma.
 *
 * @param array $creds
 *   Array with 'name' and 'pass' keys, used to authenticate user with Alma.
 * @param boolean $reset
 *   Reset static caching for this function.
 * @return stdClass
 *   Patron object.
 */
function alma_get_patron($creds = NULL, $reset = FALSE, $as_array = FALSE) {
  if (is_null($creds)) {
    // Get creds, which may throw an exception that login is required.
    global $user;
    $creds = ding_user_get_creds($user);
  }

  static $patron;
  if (!$patron || $reset) {
    $info = alma_client_invoke('get_patron_info', $creds['name'], $creds['pass'], TRUE);
    $organisation = alma_get_organisation();
    $patron = array(
      'name' => $info['user_name'],
      'email' => isset($info['mails'][0]) ? $info['mails'][0]['mail'] : '',
      'address' => isset($info['addresses'][0]) ? $info['addresses'][0]['street'] : '',
      'postal' => isset($info['addresses'][0]) ? $info['addresses'][0]['postal_code'] : '',
      'city' => isset($info['addresses'][0]) ? $info['addresses'][0]['city'] : '',
      'mobiles' => isset($info['phones']) ? $info['phones'] : '',
      'branch' => $info['preferences']['patron_branch'],
      'branchName' => $organisation['branch'][$info['preferences']['patron_branch']],
      'absentPeriods' => isset($info['absent_periods']) ? $info['absent_periods'] : '',
      'category' => isset($info['category']) ? $info['category'] : '',
      'allows' => isset($info['allows']) ? $info['allows'] : '',
    );
  }
  if( $as_array ) {
    return $patron;
  }

  return (object) $patron;
}

/**
 * Update order, by defining new expiry date or pickup branch.
 */
function alma_get_remote_data($account, $id, $reset = FALSE) {
  $creds = ding_user_get_creds($account);

  // Try to look in the session for reservation information.
  if (!isset($_SESSION['catalogue_record_detail'][$id]) || !is_array($_SESSION['catalogue_record_detail']) || $reset) {
    $_SESSION['catalogue_record_detail'][$id] = alma_client_invoke('catalogue_record_detail', $id);
  }
  
  return $_SESSION['catalogue_record_detail'][$id];
}